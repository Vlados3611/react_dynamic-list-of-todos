{"version":3,"sources":["enums/FilterType.tsx","TodoContext.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","TodoContext","createContext","todos","currentTodo","id","title","completed","userId","touchedTodo","filterTodo","All","searchTitle","openCurrentTodo","closeCurrentTodo","setFilterTodo","setSearchTitle","TodoInfo","todo","useContext","useState","touchedTodoInfo","setTouchTodoInfo","useEffect","className","classNames","type","onClick","TodoList","filterTodoBy","useCallback","todosList","filterByType","filterBySearch","filteredTodos","filter","toLowerCase","includes","Active","Completed","useMemo","map","TodoFilter","value","onChange","event","target","filterBy","changeFilterType","Object","values","filterTypes","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","TodoModal","name","email","phone","user","setUser","openTodo","setOpenTodo","getCurrentUser","a","foundUser","href","App","isLoaded","setIsLoaded","setTodos","setCurrentTodo","setTouchTodo","getTodosAPI","initialTodos","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c5973694.chunk.js","sourcesContent":["export enum FilterType {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n","import { createContext } from 'react';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './enums/FilterType';\n\ntype State = {\n  todos: Todo[];\n  currentTodo: Todo;\n  touchedTodo: boolean;\n  filterTodo: FilterType;\n  searchTitle: string;\n  openCurrentTodo: (todo: Todo) => void;\n  closeCurrentTodo: () => void;\n  setFilterTodo: (callback: () => FilterType) => void;\n  setSearchTitle: (filterTitle: string) => void;\n};\n\nexport const TodoContext = createContext<State>({\n  todos: [],\n  currentTodo: {\n    id: 0,\n    title: '',\n    completed: false,\n    userId: 0,\n  },\n  touchedTodo: false,\n  filterTodo: FilterType.All,\n  searchTitle: '',\n  openCurrentTodo: () => {},\n  closeCurrentTodo: () => {},\n  setFilterTodo: () => {},\n  setSearchTitle: () => {},\n});\n","import React, { useState, useEffect, useContext } from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\nimport { TodoContext } from '../../TodoContext';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  const { touchedTodo, openCurrentTodo } = useContext(TodoContext);\n\n  const [touchedTodoInfo, setTouchTodoInfo] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!touchedTodo) {\n      setTouchTodoInfo(touchedTodo);\n    }\n  }, [touchedTodo]);\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': touchedTodoInfo,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      {\n        completed\n          ? (\n            <td className=\"is-vcentered\">\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </td>\n          ) : (\n            <td className=\"is-vcentered\" />\n          )\n      }\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            openCurrentTodo(todo);\n            setTouchTodoInfo(true);\n          }}\n        >\n          {\n            touchedTodoInfo\n              ? (\n                <span className=\"icon\">\n                  <i className=\"far fa-eye-slash\" />\n                </span>\n              ) : (\n                <span className=\"icon\" data-cy={completed && 'iconCompleted'}>\n                  <i className=\"far fa-eye\" />\n                </span>\n              )\n          }\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, {\n  useMemo,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { TodoContext } from '../../TodoContext';\nimport { Todo } from '../../types/Todo';\nimport { FilterType } from '../../enums/FilterType';\n\nexport const TodoList: React.FC = () => {\n  const {\n    todos,\n    filterTodo,\n    searchTitle,\n  } = useContext(TodoContext);\n\n  const filterTodoBy = useCallback(\n    (todosList: Todo[], filterByType: string, filterBySearch): Todo[] => {\n      const filteredTodos = todosList.filter((todo) => (\n        todo.title.toLowerCase().includes(filterBySearch.toLowerCase())\n      ));\n\n      switch (filterByType) {\n        case FilterType.Active:\n          return filteredTodos.filter((todo: Todo) => !todo.completed);\n\n        case FilterType.Completed:\n          return filteredTodos.filter((todo: Todo) => todo.completed);\n\n        default:\n          return filteredTodos;\n      }\n    }, [filterTodo, searchTitle],\n  );\n\n  const filteredTodos = useMemo(() => {\n    return filterTodoBy(todos, filterTodo, searchTitle);\n  }, [filterTodo, searchTitle]);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodos.map((todo) => (\n          <TodoInfo\n            todo={todo}\n            key={todo.id}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport { FilterType } from '../../enums/FilterType';\n\nimport { TodoContext } from '../../TodoContext';\n\nconst changeFilterType = (filterBy: string) => {\n  switch (filterBy) {\n    case FilterType.Active:\n      return FilterType.Active;\n\n    case FilterType.Completed:\n      return FilterType.Completed;\n\n    default:\n      return FilterType.All;\n  }\n};\n\nexport const TodoFilter: React.FC = () => {\n  const {\n    filterTodo,\n    searchTitle,\n    setFilterTodo,\n    setSearchTitle,\n  } = useContext(TodoContext);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={filterTodo}\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              const { value } = event.target;\n\n              setFilterTodo(() => changeFilterType(value));\n            }}\n          >\n            {Object.values(FilterType).map((filterTypes) => (\n              <option\n                key={filterTypes}\n                value={filterTypes}\n              >\n                {filterTypes}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchTitle}\n          onChange={(event) => {\n            setSearchTitle(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {searchTitle && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setSearchTitle('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect, useContext } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { TodoContext } from '../../TodoContext';\n\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const {\n    currentTodo,\n    touchedTodo,\n    closeCurrentTodo,\n  } = useContext(TodoContext);\n\n  const [user, setUser] = useState<User>({\n    id: 1,\n    name: 'Name is not found',\n    email: 'Email is not found',\n    phone: 'Phone is not found',\n  });\n  const [openTodo, setOpenTodo] = useState<boolean>(false);\n\n  const getCurrentUser = async (userId: number) => {\n    setOpenTodo(false);\n    try {\n      const foundUser = await getUser(userId);\n\n      setUser(foundUser);\n      setOpenTodo(true);\n    } catch {\n      setOpenTodo(true);\n    }\n  };\n\n  useEffect(() => {\n    if (touchedTodo) {\n      getCurrentUser(currentTodo.userId);\n    }\n  }, [touchedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!openTodo ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeCurrentTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong\n                className={classNames({\n                  'has-text-danger': !currentTodo.completed,\n                  'has-text-success': currentTodo.completed,\n                })}\n              >\n                {\n                  currentTodo.completed\n                    ? 'Done'\n                    : 'Planned'\n                }\n              </strong>\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useState,\n  useEffect,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoContext } from './TodoContext';\n\nimport { Todo } from './types/Todo';\nimport { FilterType } from './enums/FilterType';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n// import { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [currentTodo, setCurrentTodo] = useState<Todo>({\n    id: 0,\n    title: '',\n    completed: false,\n    userId: 0,\n  });\n  const [touchedTodo, setTouchTodo] = useState<boolean>(false);\n  const [filterTodo, setFilterTodo] = useState<FilterType>(FilterType.All);\n  const [searchTitle, setSearchTitle] = useState<string>('');\n\n  const openCurrentTodo = (todo: Todo) => {\n    setCurrentTodo(todo);\n    setTouchTodo(true);\n  };\n\n  const closeCurrentTodo = () => {\n    setTouchTodo(false);\n  };\n\n  const getTodosAPI = async () => {\n    setIsLoaded(false);\n    try {\n      const initialTodos = await getTodos();\n\n      setTodos(initialTodos);\n      setIsLoaded(true);\n    } catch {\n      setIsLoaded(true);\n    }\n  };\n\n  useEffect(() => {\n    getTodosAPI();\n  }, []);\n\n  return (\n    <>\n      <TodoContext.Provider value={{\n        todos,\n        currentTodo,\n        touchedTodo,\n        filterTodo,\n        searchTitle,\n        openCurrentTodo,\n        closeCurrentTodo,\n        setFilterTodo,\n        setSearchTitle,\n      }}\n      >\n        <div className=\"section\">\n          <div className=\"container\">\n            <div className=\"box\">\n              <h1 className=\"title\">Todos:</h1>\n              <div className=\"block\">\n                <TodoFilter />\n              </div>\n\n              <div className=\"block\">\n                {\n                  !isLoaded\n                    ? (\n                      <Loader />\n                    ) : (\n                      <TodoList />\n                    )\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n        {touchedTodo && <TodoModal />}\n      </TodoContext.Provider>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}