{"version":3,"sources":["TodoContext.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoContext","createContext","todos","currentTodo","id","title","completed","userId","touchedTodo","sortTodo","searchTitle","openCurrentTodo","closeCurrentTodo","setSortTodo","setSearchTitle","TodoInfo","todo","useContext","useState","touchedTodoInfo","setTouchTodoInfo","useEffect","className","classNames","type","onClick","TodoList","sortTodoBy","useCallback","todosList","sortBy","filterTodos","filteredTodos","filter","toLowerCase","includes","useMemo","map","TodoFilter","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","getUser","TodoModal","name","email","phone","user","setUser","openTodo","setOpenTodo","getCurrentUser","a","foundUser","href","App","isLoaded","setIsLoaded","setTodos","setCurrentTodo","setTouchTodo","getTodosAPI","loadedFunction","initialTodos","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2c66dc5.chunk.js","sourcesContent":["import { createContext } from 'react';\nimport { Todo } from './types/Todo';\n\ntype State = {\n  todos: Todo[];\n  currentTodo: Todo;\n  touchedTodo: boolean;\n  sortTodo: string;\n  searchTitle: string;\n  openCurrentTodo: (todo: Todo) => void;\n  closeCurrentTodo: () => void;\n  setSortTodo: (sortType: string) => void;\n  setSearchTitle: (filterTitle: string) => void;\n};\n\nexport const TodoContext = createContext<State>({\n  todos: [],\n  currentTodo: {\n    id: 0,\n    title: '',\n    completed: false,\n    userId: 0,\n  },\n  touchedTodo: false,\n  sortTodo: '',\n  searchTitle: '',\n  openCurrentTodo: () => {},\n  closeCurrentTodo: () => {},\n  setSortTodo: () => {},\n  setSearchTitle: () => {},\n});\n","import React, { useState, useEffect, useContext } from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\nimport { TodoContext } from '../../TodoContext';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  const { touchedTodo, openCurrentTodo } = useContext(TodoContext);\n\n  const [touchedTodoInfo, setTouchTodoInfo] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!touchedTodo) {\n      setTouchTodoInfo(touchedTodo);\n    }\n  }, [touchedTodo]);\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': touchedTodoInfo,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      {\n        completed\n          ? (\n            <td className=\"is-vcentered\">\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </td>\n          ) : (\n            <td className=\"is-vcentered\" />\n          )\n      }\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            openCurrentTodo(todo);\n            setTouchTodoInfo(true);\n          }}\n        >\n          {\n            touchedTodoInfo\n              ? (\n                <span className=\"icon\">\n                  <i className=\"far fa-eye-slash\" />\n                </span>\n              ) : (\n                <span className=\"icon\" data-cy={completed && 'iconCompleted'}>\n                  <i className=\"far fa-eye\" />\n                </span>\n              )\n          }\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, {\n  useMemo,\n  useCallback,\n  useContext,\n} from 'react';\n\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { TodoContext } from '../../TodoContext';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const {\n    todos,\n    sortTodo,\n    searchTitle,\n  } = useContext(TodoContext);\n\n  const sortTodoBy = useCallback(\n    (todosList: Todo[], sortBy: string, filterTodos): Todo[] => {\n      const filteredTodos = todosList.filter((todo) => (\n        todo.title.toLowerCase().includes(filterTodos.toLowerCase())\n      ));\n\n      switch (sortBy) {\n        case 'active':\n          return filteredTodos.filter((todo: Todo) => !todo.completed);\n\n        case 'completed':\n          return filteredTodos.filter((todo: Todo) => todo.completed);\n\n        default:\n          return filteredTodos;\n      }\n    }, [sortTodo, searchTitle],\n  );\n\n  const filteredTodos = useMemo(() => {\n    return sortTodoBy(todos, sortTodo, searchTitle);\n  }, [sortTodo, searchTitle]);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodos.map((todo) => (\n          <TodoInfo\n            todo={todo}\n            key={todo.id}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport { TodoContext } from '../../TodoContext';\n\nexport const TodoFilter: React.FC = () => {\n  const {\n    sortTodo,\n    searchTitle,\n    setSortTodo,\n    setSearchTitle,\n  } = useContext(TodoContext);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={sortTodo}\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              setSortTodo(event.target.value);\n            }}\n          >\n            <option value=\"all\">\n              All\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchTitle}\n          onChange={(event) => {\n            setSearchTitle(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {searchTitle && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setSearchTitle('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect, useContext } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { TodoContext } from '../../TodoContext';\n\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const {\n    currentTodo,\n    touchedTodo,\n    closeCurrentTodo,\n  } = useContext(TodoContext);\n\n  const [user, setUser] = useState<User>({\n    id: 1,\n    name: 'Name is not found',\n    email: 'Email is not found',\n    phone: 'Phone is not found',\n  });\n  const [openTodo, setOpenTodo] = useState<boolean>(false);\n\n  const getCurrentUser = async (userId: number) => {\n    setOpenTodo(false);\n    try {\n      const foundUser = await getUser(userId);\n\n      setUser(foundUser);\n      setOpenTodo(true);\n    } catch {\n      setOpenTodo(true);\n    }\n  };\n\n  useEffect(() => {\n    if (touchedTodo) {\n      getCurrentUser(currentTodo.userId);\n    }\n  }, [touchedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!openTodo ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeCurrentTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong\n                className={classNames({\n                  'has-text-danger': !currentTodo.completed,\n                  'has-text-success': currentTodo.completed,\n                })}\n              >\n                {\n                  currentTodo.completed\n                    ? 'Done'\n                    : 'Planned'\n                }\n              </strong>\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useState,\n  useEffect,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoContext } from './TodoContext';\n\nimport { Todo } from './types/Todo';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n// import { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [currentTodo, setCurrentTodo] = useState<Todo>({\n    id: 0,\n    title: '',\n    completed: false,\n    userId: 0,\n  });\n  const [touchedTodo, setTouchTodo] = useState<boolean>(false);\n  const [sortTodo, setSortTodo] = useState<string>('');\n  const [searchTitle, setSearchTitle] = useState<string>('');\n\n  const openCurrentTodo = (todo: Todo) => {\n    setCurrentTodo(todo);\n    setTouchTodo(true);\n  };\n\n  const closeCurrentTodo = () => {\n    setTouchTodo(false);\n  };\n\n  const getTodosAPI = async (loadedFunction: any) => {\n    setIsLoaded(false);\n    try {\n      const initialTodos = await loadedFunction();\n\n      setTodos(initialTodos);\n      setIsLoaded(true);\n    } catch {\n      setIsLoaded(true);\n    }\n  };\n\n  useEffect(() => {\n    getTodosAPI(getTodos);\n  }, []);\n\n  return (\n    <>\n      <TodoContext.Provider value={{\n        todos,\n        currentTodo,\n        touchedTodo,\n        sortTodo,\n        searchTitle,\n        openCurrentTodo,\n        closeCurrentTodo,\n        setSortTodo,\n        setSearchTitle,\n      }}\n      >\n        <div className=\"section\">\n          <div className=\"container\">\n            <div className=\"box\">\n              <h1 className=\"title\">Todos:</h1>\n              <div className=\"block\">\n                <TodoFilter />\n              </div>\n\n              <div className=\"block\">\n                {\n                  !isLoaded\n                    ? (\n                      <Loader />\n                    ) : (\n                      <TodoList />\n                    )\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n        {touchedTodo && <TodoModal />}\n      </TodoContext.Provider>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}